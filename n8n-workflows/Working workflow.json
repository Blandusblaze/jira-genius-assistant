{
  "name": "Working workflow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -720,
        -100
      ],
      "id": "4ecab309-2ae0-49f5-9d80-1273162f83ce",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "duplicateItem": "={{ false }}",
        "assignments": {
          "assignments": [
            {
              "name": "startAt",
              "value": 0,
              "type": "number"
            },
            {
              "name": "allIssues",
              "value": "[]",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -500,
        -100
      ],
      "id": "377a8fd9-8c48-406d-a273-fe6b5d3c4f59",
      "name": "Init Pagination"
    },
    {
      "parameters": {
        "url": "https://trovent.atlassian.net/rest/api/3/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "jql",
              "value": "project=YS"
            },
            {
              "name": "startAt",
              "value": "={{ $json[\"startAt\"] }}"
            },
            {
              "name": "maxResults",
              "value": "100"
            },
            {
              "name": "name",
              "value": "expand"
            },
            {
              "name": "value",
              "value": "renderedFields,comments"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -60,
        -100
      ],
      "id": "d9c379a8-ab2d-4da7-b0de-836caa238ec7",
      "name": "Fetch JIRA Issues",
      "credentials": {
        "httpBasicAuth": {
          "id": "wEKoD9npFw9QkOdg",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import json\n\noutput = []\n\n# Parse the stringified allIssues list\ntotal_issues = items[0][\"json\"].get(\"total\", 0)\nraw_issues = items[0][\"json\"].get(\"allIssues\", \"[]\")\nall_issues = json.loads(raw_issues) if isinstance(raw_issues, str) else raw_issues\n\n\ndef get_description_text(description_block):\n    if not description_block:\n        return \"\"\n    result = []\n    for block in description_block.get(\"content\", []):\n        if block.get(\"type\") == \"paragraph\":\n            line = \" \".join([c.get(\"text\", \"\") for c in block.get(\"content\", [])])\n            result.append(line)\n        elif block.get(\"type\") == \"bulletList\":\n            for item in block.get(\"content\", []):\n                for para in item.get(\"content\", []):\n                    line = \" \".join([c.get(\"text\", \"\") for c in para.get(\"content\", [])])\n                    result.append(f\"- {line}\")\n    return \"\\n\".join(result)\n\nfor index, issue in enumerate(all_issues, start=1):\n    fields = issue.get(\"fields\", {})\n    issue_data = {\n        \"issue_number\": index,\n        \"id\": issue.get(\"id\"),\n        \"key\": issue.get(\"key\"),\n        \"self\": issue.get(\"self\"),\n        \"summary\": fields.get(\"summary\", \"\"),\n        \"status\": fields.get(\"status\", {}).get(\"name\", \"\"),\n        \"statusCategory\": fields.get(\"statusCategory\", {}).get(\"name\", \"\"),\n        \"issueType\": fields.get(\"issuetype\", {}).get(\"name\", \"\"),\n        \"priority\": fields.get(\"priority\", {}).get(\"name\", \"\"),\n        \"project\": fields.get(\"project\", {}).get(\"name\", \"\"),\n        \"created\": fields.get(\"created\", \"\"),\n        \"updated\": fields.get(\"updated\", \"\"),\n        \"description\": get_description_text(fields.get(\"description\", {})),\n        \"reporter\": fields.get(\"reporter\", {}).get(\"displayName\", \"\"),\n        \"assignee\": fields.get(\"assignee\", {}).get(\"displayName\", \"\") if fields.get(\"assignee\") else None,\n        \"parent\": fields.get(\"parent\", {}).get(\"key\") if \"parent\" in fields else None,\n    \"total\": total_issues}\n    output.append({ \"json\": issue_data })\n\nreturn output\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        -120
      ],
      "id": "a99d8564-7ac2-494f-9dbf-7afc5f739b6e",
      "name": "Clean JIRA Issues"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# NO JSON IMPORT NEEDED, n8n handles it natively\n\ndef to_native(obj):\n    try:\n        if isinstance(obj, list):\n            return [to_native(i) for i in obj]\n        elif isinstance(obj, dict):\n            return {str(k): to_native(v) for k, v in obj.items()}\n        elif hasattr(obj, 'to_dict'):\n            return to_native(obj.to_dict())\n        else:\n            return obj\n    except Exception:\n        return str(obj)\n\noutput = []\nraw = to_native(items[0][\"json\"])\nstart_at = raw.get(\"startAt\", 0)\ntotal = raw.get(\"total\", 0)\ntry:\n    all_issues = json.loads(raw.get(\"allIssues\", \"[]\"))\nexcept Exception:\n    all_issues = []\nnew_issues = raw.get(\"issues\", [])\nall_issues.extend(to_native(new_issues))\noutput.append({\n    \"json\": {\n        \"startAt\": start_at + 100,\n        \"total\": total,\n        \"allIssues\": all_issues\n    }\n})\nreturn output\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        -100
      ],
      "id": "2129078d-c27b-4fd6-810e-f668d1354d7e",
      "name": "Merge Issues"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "leftValue": "={{$json[\"startAt\"]}}",
              "rightValue": "={{ $json.total }}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": "={{ false }}",
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        340,
        -100
      ],
      "id": "6c085274-29a5-4024-beb1-f44cb2a352a5",
      "name": "If more issues?"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "return [{\"json\": item[\"json\"]} for item in items]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        820,
        -120
      ],
      "id": "01fb26ec-0654-4123-bc38-f5bbfd375f5e",
      "name": "Split items"
    },
    {
      "parameters": {
        "url": "={{ $json[\"self\"] }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        -300
      ],
      "id": "d2635e1c-fc49-426a-bac3-d8b234381e8d",
      "name": "Extract the comment1",
      "credentials": {
        "httpBasicAuth": {
          "id": "Typ790UjKBNWiViy",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def extract_all_text_with_mentions(body):\n    if not body:\n        return \"\"\n    text_parts = []\n\n    def extract_from_content(content_blocks):\n        for block in content_blocks:\n            block_type = block.get(\"type\")\n            if block_type == \"text\" and \"text\" in block:\n                text_parts.append(block[\"text\"])\n            elif block_type == \"mention\" and \"attrs\" in block:\n                text_parts.append(block[\"attrs\"].get(\"text\", \"\"))\n            elif \"content\" in block:\n                extract_from_content(block[\"content\"])\n\n    extract_from_content(body.get(\"content\", []))\n    return \" \".join(text_parts)\n\n\noutput = []\n\noutput = []\n\nfor item in items:\n    fields = item[\"json\"].get(\"fields\", {})\n    comments = fields.get(\"comment\", {}).get(\"comments\", [])\n\n    flattened_comments = [\n        {\n            \"author\": c.get(\"author\", {}).get(\"displayName\", \"\"),\n            \"created\": c.get(\"created\"),\n            \"comment\": extract_all_text_with_mentions(c.get(\"body\"))\n        }\n        for c in comments\n    ]\n\n    output.append({\n        \"json\": {\n            \"key\": item[\"json\"].get(\"key\"),\n            \"comments_flattened\": flattened_comments,\n        }\n    })\n\nreturn output\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        -300
      ],
      "id": "69409bdf-5f84-4377-ada5-afbd0e68f181",
      "name": "Flatten the comment1"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "key",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1580,
        -140
      ],
      "id": "b0fb6d99-58bf-4f0d-ad5e-016e57088808",
      "name": "Merge Comment"
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:8000/reset",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -280,
        -100
      ],
      "id": "80fd91a5-f247-4336-b0dc-40c435e79b7c",
      "name": "Reset JSONs"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/generate_training",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ [$json] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1800,
        -140
      ],
      "id": "0fc6b661-2971-4edd-883b-e033f207f113",
      "name": "Generate Training"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Init Pagination",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init Pagination": {
      "main": [
        [
          {
            "node": "Reset JSONs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch JIRA Issues": {
      "main": [
        [
          {
            "node": "Merge Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Issues": {
      "main": [
        [
          {
            "node": "If more issues?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If more issues?": {
      "main": [
        [
          {
            "node": "Clean JIRA Issues",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch JIRA Issues",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Clean JIRA Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean JIRA Issues": {
      "main": [
        [
          {
            "node": "Split items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split items": {
      "main": [
        [
          {
            "node": "Extract the comment1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Comment",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract the comment1": {
      "main": [
        [
          {
            "node": "Flatten the comment1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flatten the comment1": {
      "main": [
        [
          {
            "node": "Merge Comment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Comment": {
      "main": [
        [
          {
            "node": "Generate Training",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset JSONs": {
      "main": [
        [
          {
            "node": "Fetch JIRA Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "28bc184c-6331-4124-a7d5-e05dd27e9ed2",
  "meta": {
    "instanceId": "db13bff56abe5c893af4556f7f8966c41af1ec67dfbf256dab729685374ad149"
  },
  "id": "9VVbVxKeNG4GHm5T",
  "tags": []
}